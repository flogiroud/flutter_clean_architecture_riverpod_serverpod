// Mocks generated by Mockito 5.3.2 from annotations
// in nexo_flutter/test/mock/i_repositories/i_user_repository_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nexo_client/nexo_client.dart' as _i2;
import 'package:nexo_flutter/src/domain/i_repositories/i_user_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNexoUserInfo_0 extends _i1.SmartFake implements _i2.NexoUserInfo {
  _FakeNexoUserInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserRepository extends _i1.Mock implements _i3.IUserRepository {
  MockIUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.NexoUserInfo> updatePseudo({required String? pseudo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePseudo,
          [],
          {#pseudo: pseudo},
        ),
        returnValue: _i4.Future<_i2.NexoUserInfo>.value(_FakeNexoUserInfo_0(
          this,
          Invocation.method(
            #updatePseudo,
            [],
            {#pseudo: pseudo},
          ),
        )),
      ) as _i4.Future<_i2.NexoUserInfo>);
  @override
  _i4.Future<_i2.NexoUserInfo> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i4.Future<_i2.NexoUserInfo>.value(_FakeNexoUserInfo_0(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
      ) as _i4.Future<_i2.NexoUserInfo>);
  @override
  _i4.Future<bool> updateImage({required _i5.ByteData? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateImage,
          [],
          {#data: data},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
